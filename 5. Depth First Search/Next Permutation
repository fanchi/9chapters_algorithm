/*
Given a list of integers, which denote a permutation.

Find the next permutation in ascending order.

 Notice
The list may contains duplicate integers.

Have you met this question in a real interview? Yes
Example
For [1,3,2,3], the next permutation is [1,3,3,2]

For [4,3,2,1], the next permutation is [1,2,3,4]

Tags 
Permutation LintCode Copyright
Related Problems 
Medium Permutation Sequence 28 %
Medium Previous Permutation 27 %
Medium Permutations II 26 %
*/

/*
死记硬背
2. 1. find the last increase index (partitionInd), from right to left (从右到左找到第一个违背递增的下标)
2. find the first index (changeInd) such that nums[changeInd] > nums[partitionInd], from right to left
3. swap(nums, changeInd, partitionInd)
4. from partitionInd + 1 to nums.length - 1, reverse
*/
public class Solution {
    /*
     * @param nums: A list of integers
     * @return: A list of integers
     */
    public int[] nextPermutation(int[] nums) {
        // write your code here
        if (nums == null || nums.length == 0) {
            return new int[0];
        }
        if (nums.length == 1) {
            return nums;
        }
        int pivot = -1;
        for (int j = nums.length - 1; j > 0; j --) {
            if (nums[j - 1] < nums[j]) {
                pivot = j - 1;
                break;
            }
        }
        if (pivot == -1) {
            reverse(nums, 0);
            return nums;
        }
        int partition = nums.length - 1;
        for (int j = nums.length - 1; j > pivot; j --) {
            if (nums[j] > nums[pivot]) {
                partition = j;
                break;
            }
        }
        swap(nums, pivot, partition);
        reverse(nums, pivot + 1);
        return nums;
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    private void reverse(int[] nums, int i) {
        int start = i, end = nums.length - 1;
        while (start < end) {
            swap(nums, start ++, end --);
        }
    }
}